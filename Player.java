
/**
 * The player object represents
 * the two players of the game.
 * Manages turns, and playing cards onto
 * the board's node array.
 * Players can have a seperate cardpool
 * to build hands from. Players need to 
 * know if it's their turn to make a play.
 * Player's need to know where their hand
 * is to validate if a correct click was made
 * when attempting to play a card.
 * @author Keagen Thomson
 * @version 1.0.0
 */
public class Player
{
    /**
     * The cards that a player gets their hand dealt from
     */
    private HiddenCardPool deck;
    /**
     * The cards that can be selected and placed on the board once per turn
     */
    private Hand hand;
    /**
     * The player name, as currently written this will only be "Player 1" or "Player 2"
     * If it is modified in the future, the card object must have String variables that indicate
     * Player1 and Player2. This will then be used to calculate a card's color instead.
     */
    private final String owner;
    /**
     * The player's hand location column when drawn onto the view
     */
    private int boardLocation;
    /**
     * Indicates whether it is the current player's turn to place a card from their hand to the board.
     * Players cannot pass their turn and must always make a play.
     */
    private boolean turn;
    /**
     * The total amount of cards a player has in hand. This is used in combination with the sum of a player's
     * cards on the board to calculate the final score at the end of the game (when the board is full)
     */
    private int cardsInHand;

    /**
     * Creates player object taking the folllowing parameters
     * @param owner The player's name which is a string that should be "Player 1" or "Player 2"
     * @param deck The cardpool a player can build their hand from
     * @param hand The hand used in the game that contains cards
     * @param boardLocation the index column the player's hand is at.
     * @param cardsInHand the total of all cards in this player's hand, used when calculating 
     */
    public Player(String owner, HiddenCardPool deck, Hand hand, int boardLocation)
    {
        this.owner = owner;
        this.deck = deck;
        this.hand = hand;
        this.turn = false;
        this.boardLocation = boardLocation;
        this.cardsInHand = cardsInHand;
        updateCardsInHand();
        
    }
    /**
     * 2nd Constructor if a player is ever generated which it IS in the standard case
     */
    public Player(String owner){
        this.owner = owner;
        buildPlayer();
        this.deck = deck;
        this.hand = hand;
        this.turn = false;
        this.boardLocation = 0;
        this.cardsInHand = this.hand.size();
    }
    /**
     * Update's the player's cards in hand with the hand collections size method.
     */
    public void updateCardsInHand(){
        this.cardsInHand = this.hand.getHandSize();
    }
    /**
     * Getter for cards in hand which is updated for sanity's sake after every play. Used in score calculations.
     */
    public int getCardsInHand(){
        return this.cardsInHand;
    }
    /**
     * Getter for player's name or "owner" which is either "Player 1" or "Player 2"
     * as generated by the controller class. It is open to modify, in the event functionality
     * beyond pregenerated hands and matches are possible i.e. IRL players can build a deck and name their character
     */
    public String getOwner(){
        return this.owner;
    }
    /**
     *
     * @return The player's hand containing all the cards they can make a play with
     */
    public Hand getHand(){
        return this.hand;
    }
    /**
     * Setter for player's hand
     */
    public void setHand(Hand hand){
        this.hand = hand;
    }
    /**
     * Getter for the player's hand
     * @return Returns the player's hand location on the Board which is used for drawing to the screen
     */
    public int getBoardLocation(){
        return this.boardLocation;
    }
    /**
     * Setter for player's board location an index location on the board
     * based on the player's turn order. Players that go First are on
     * the right side of the board (Index column 4) while players that go 2nd
     * are on the left side of the board (Index column 0).
     */
    public void setBoardLocation(int columnIndex){
        this.boardLocation = columnIndex;
    }
    /**
     * Getter for player's deck used to "deal" cards to the player's hand
     */
    public HiddenCardPool getDeck(){
        return this.deck;
    }
    /**
     * Setter for player's deck if in the future it is possible to
     * build a deck that isn't randomly generated
     */
    public void setDeck(HiddenCardPool deck){
        this.deck = deck;
    }
    /**
     * Getter for the turn, used when toggling active player
     */
    public Boolean getTurn(){
        return this.turn;
    }
    /**
     * Getter for a player's turn
     */
    public void setTurn(Boolean turn){
        this.turn = turn;
    }
    /**
     * Builds a deck of cards to generate a hand from
     * and assigns it as the player's deck.
     */
    private void buildDeck(){
        String deckLabel = this.getOwner();
        HiddenCardPool deck = new HiddenCardPool(deckLabel);
        this.setDeck(deck);
    }
    /** 
     * Builds a hand from the player's generated deck and
     * assigns it to the player.
     */
    private void buildHand(){
        String handLabel = this.getOwner();
        Hand playerHand = new Hand(handLabel);
        this.setHand(playerHand);
    }
    /**
     * Toggles a player's turn
     * Property used to determine active player when calculating
     * valid clickState for player's hand.
     */
    public void toggleTurn(){
        Boolean toggledTurn = !this.getTurn();
        this.setTurn(toggledTurn);
    }
    /**
     * plays a card to the board if and only if the index was empty
     * then it updates the hand with the play and sends the boolean status of the method call
     * to its caller
     * @param handCardIndex the index of a card to be played from the hand
     * @param boardIndex the board index a card is to be played on
     * @param board the board that is being played on. Usually only one, this is called by the model
     * and passes its board to this methodpr
     * @return if a card was removed from the hand and played on the board
     */
    public boolean playCard(int handCardIndex, int boardIndex, Board board){
        boolean canPlayCard = attemptPlayCard(boardIndex, board);
        Card cardFromHand = this.getHand().showCard(handCardIndex);
        boolean playedCard = false;
        if(canPlayCard){
            board.playCardAt(boardIndex, cardFromHand);
            this.getHand().popCard(handCardIndex);
            updateCardsInHand();
            playedCard = canPlayCard;
        }
        return playedCard;
    }
    /**
     * Method for the player to check if a play is valid before removing the card from their hand
     * @param boardIndex the board index to test if there's a card at
     * @param board the board to test, passed in by the model's attemptPlay method
     */
    public boolean attemptPlayCard(int boardIndex, Board board){
        return board.attemptPlayCardAt(boardIndex);
    }
    /**
     * Wrapper method for simpler construction of a player's deck and hand
     * 
     */
    public void buildPlayer(){
        this.buildDeck();
        this.buildHand();
    }

}
